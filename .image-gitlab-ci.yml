variables:
  BUILDX: https://github.com/docker/buildx/releases/download/v0.4.1/buildx-v0.4.1.linux-amd64
  DOCKER_CLI_EXPERIMENTAL: enabled
  IMAGE: {{ IMAGE }}
  PLATFORMS: linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7
  REGISTRY: $REGISTRY_URI/$CI_PROJECT_PATH
  USER_LOGIN: $GITLAB_USER_LOGIN

stages:
  - Static Code Analysis
  - Create Image
  - Functional Tests
  - Promote Image
  - Clean

image: docker:19.03.8

.registry_template: &registry_login
  before_script:
  - export TAG=bld_$CI_PIPELINE_IID_${CI_COMMIT_SHA:0:7}
  - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $REGISTRY
  services: [ "docker:dind" ]

analysis:
  stage: Static Code Analysis
  image: instantlinux/python-builder:latest
  script: cd images/$IMAGE && make analysis

create_image:
  <<: *registry_login
  stage: Create Image
  script:
  - mkdir -p $HOME/.docker/cli-plugins/
  - wget -O $HOME/.docker/cli-plugins/docker-buildx $BUILDX
  - chmod +x $HOME/.docker/cli-plugins/docker-buildx
  - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
  - docker buildx create --name multibuild
  - docker buildx use multibuild
  - docker buildx build --tag $REGISTRY/$IMAGE:$TAG --platform $PLATFORMS
      --push --file images/$IMAGE/Dockerfile images/$IMAGE
      --build-arg=VCS_REF=$CI_COMMIT_SHA
      --build-arg=BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%SZ)
  services: [ { name: "docker:dind", command: ["--experimental"] } ]

test:
  stage: Functional Tests
  script: apk add make && cd images/$IMAGE && make test_functional

promote_image:
  # only: {refs: [master]}
  stage: Promote Image
  <<: *registry_login
  script: apk add make && cd images/$IMAGE && make promote_image

clean:
  stage: Clean
  script: docker rmi $REGISTRY/$IMAGE:$TAG
  when: always
  services: [ "docker:dind" ]
