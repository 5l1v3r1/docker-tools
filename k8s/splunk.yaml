# Note -- if container won't start because password hasn't been set, create
# a user-seed.conf in mounted volume. Details are found at:
# http://docs.splunk.com/Documentation/Splunk/latest/Admin/user-seedconf
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: $SERVICE_NAME
  name: $SERVICE_NAME
spec:
  clusterIP: $SPLUNK_IP
  ports:
  - name: $SERVICE_NAME
    port: 80
    targetPort: 8000
  - name: syslog
    port: $PORT_SPLUNK_SYSLOG
    targetPort: 1514
  - name: hec
    port: 8088
    targetPort: 8088
  - name: api
    port: 8089
    targetPort: 8089
  - name: forwarder
    port: 9997
    targetPort: 9997
  selector:
    app.kubernetes.io/name: $SERVICE_NAME
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/name: $SERVICE_NAME
    release: "0.1"
  name: $SERVICE_NAME
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: $SERVICE_NAME
      release: "0.1"
  serviceName: $SERVICE_NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: $SERVICE_NAME
        release: "0.1"
    spec:
      containers:
      - name: $SERVICE_NAME
        env:
        - { name: SPLUNK_ADD, value: tcp 1514 }
        - { name: SPLUNK_ENABLE_LISTEN, value: "9997" }
        - { name: SPLUNK_PASSWORD, value: changeme }
        - { name: SPLUNK_START_ARGS, value: --accept-license --answer-yes }
        image: splunk/splunk:$VERSION_SPLUNK
        ports:
        - containerPort: 8000
        - containerPort: 1514
        - containerPort: 8088
        - containerPort: 8089
        - containerPort: 9997
        resources:
          limits:
            memory: 4096Mi
          requests:
            cpu: 200m
            memory: 384Mi
        volumeMounts:
        - mountPath: /opt/splunk/etc
          name: splunk
          subPath: etc
        - mountPath: /opt/splunk/var
          name: splunk
          subPath: var
      nodeSelector:
        service.$SERVICE_NAME: allow
  volumeClaimTemplates:
  - metadata:
      name: $SERVICE_NAME
    spec:
      accessModes: [ ReadWriteOnce ]
      resources:
        requests:
          storage: 50Mi
      selector:
        matchLabels:
          volume.group: $SERVICE_NAME
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: $SERVICE_NAME-ingress
  annotations:
    kubernetes.io/ingress.class: nginx-internal
spec:
  tls:
  - secretName: $SERVICE_NAME.$DOMAIN
    hosts:
    - $SERVICE_NAME.$DOMAIN
  rules:
  - host: $SERVICE_NAME.$DOMAIN
    http:
      paths:
      - path: /
        backend:
          serviceName: $SERVICE_NAME
          servicePort: 80
---
# TODO not yet working
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: $SERVICE_NAME-totp
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/auth-url: http://$AUTHELIA_IP/api/verify
    nginx.ingress.kubernetes.io/auth-signin: https://authtotp.$DOMAIN
spec:
  tls:
  - secretName: $SERVICE_NAME.$DOMAIN
    hosts:
    - repo.$DOMAIN
  rules:
  - host: repo.$DOMAIN
    http:
      paths:
      - path: /en-US/account/login
        backend:
          serviceName: $SERVICE_NAME
          servicePort: 80
