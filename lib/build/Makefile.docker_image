# Standard Makefile for Docker image
#   created by richb@instantlinux.net 20-Apr-2017

VENV        = python_env
VDIR        = $(PWD)/$(VENV)
IMAGE_NAME  = $(REGISTRY)/$(IMAGE):$(TAG)
DOCKER_REPO = $(USER_LOGIN)/$(IMAGE)

analysis: flake8
	  @echo "Running static analysis"

test_functional:
	@echo "Running functional verification of running image"

promote_image:
	docker pull $(REGISTRY)/$(IMAGE):$(TAG)
	docker tag $(REGISTRY)/$(IMAGE):$(TAG) $(REGISTRY)/$(IMAGE):latest
	docker push $(REGISTRY)/$(IMAGE):latest
	docker login -u $(USER_LOGIN) -p $(DOCKER_TOKEN)
	docker tag $(REGISTRY)/$(IMAGE):$(TAG) $(USER_LOGIN)/$(IMAGE):$(TAG)
	docker tag $(REGISTRY)/$(IMAGE):$(TAG) $(USER_LOGIN)/$(IMAGE):latest
	docker push $(USER_LOGIN)/$(IMAGE):$(TAG)
	docker push $(USER_LOGIN)/$(IMAGE):latest
	-[ -x images/$(IMAGE)/hooks/post_build ] && images/$(IMAGE)/hooks/post_build
	[ -x images/$(IMAGE)/hooks/post_push ] && sh -x images/$(IMAGE)/hooks/post_push
	$(eval TOKEN=$(shell curl -s -H "Content-Type: application/json" -X POST \
	  -d '{"username": "'$(USER_LOGIN)'", "password": "'$(DOCKER_TOKEN)'"}' \
	  https://hub.docker.com/v2/users/login/ | jq -r .token))
	curl -H "Authorization: JWT $(TOKEN)" -X PATCH --data-urlencode \
	  full_description@.images/$(IMAGE)/README.md \
	  https://hub.docker.com/v2/repositories/$(USER_LOGIN)/$(IMAGE)

flake8: test_requirements
	@echo "Running flake8 code analysis"
	(. $(VDIR)/bin/activate ; flake8 --exclude=python_env .)

python_env: $(VDIR)/bin/python

test_requirements: python_env
	@echo "Installing test requirements"
	(if [ -f requirements/test.txt ]; then \
	  . $(VDIR)/bin/activate && \
	  pip install -r requirements/test.txt -r requirements/common.txt; \
	 fi)

$(VDIR)/bin/python:
	@echo "Creating virtual environment"
	virtualenv --system-site-packages $(VENV)

clean:
	@echo "Cleaning out generated files"
	@rm -rf ./app/{.coverage,htmlcov,coverage.xml}
	@find . -name \*.pyc -exec rm {} \;
	@find . -name \*.log -exec rm {} \;
	@find . -name \*~ -exec rm {} \;
	@find . -name results.xml -exec rm {} \;
	@find . -name __pycache__ -exec rm -fr {} \;
