---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: $SERVICE_NAME
  name: $SERVICE_NAME
spec:
  ports:
  - { port: 80, targetPort: 8200 }
  selector:
    app.kubernetes.io/name: $SERVICE_NAME
    release: "0.1"
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/name: $SERVICE_NAME
    release: "0.1"
  name: $SERVICE_NAME
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: $SERVICE_NAME
      release: "0.1"
  serviceName: $SERVICE_NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: $SERVICE_NAME
        release: "0.1"
    spec:
      containers:
      - name: $SERVICE_NAME
        env:
        - { name: PUID, value: "0" }
        - { name: TZ, value: $TZ }
        image: $REGISTRY_URI/$SERVICE_NAME:latest
        ports:
        - containerPort: 8200
        volumeMounts:
        - mountPath: /config
          name: config
        - mountPath: /restore
          name: restore
        - mountPath: /backup/share
          name: share
        # list of volumes to back up, customize as needed
        - mountPath: /backup/share/artifactory
          name: artifactory
          readOnly: true
        - mountPath: /backup/services
          name: backup
          readOnly: true
        - mountPath: /backup/share/cloud
          name: cloud
          readOnly: true
        - mountPath: /backup/samba_dos
          name: dos
          readOnly: true
        - mountPath: /backup/ftp
          name: ftp
          readOnly: true
        - mountPath: /backup/share/gitlab
          name: gitlab
          readOnly: true
        - mountPath: /backup/home
          name: home
          readOnly: true
        - mountPath: /backup/share/household
          name: household
          readOnly: true
        - mountPath: /backup/inbox
          name: inbox
          readOnly: true
        - mountPath: /backup/share/jira
          name: jira
          readOnly: true
        - mountPath: /backup/pc/MP3
          name: mp3
          readOnly: true
        - mountPath: /backup/share/nexus
          name: nexus
          readOnly: true
        - mountPath: /backup/share/ox-appsuite
          name: ox-appsuite
          readOnly: true
        - mountPath: /backup/pc/Pictures
          name: pictures
          readOnly: true
        - mountPath: /backup/share/rainloop
          name: rainloop
          readOnly: true
        - mountPath: /backup/u
          name: user
          readOnly: true
        - mountPath: /backup/webmail
          name: webmail
          readOnly: true
      dnsConfig:
        nameservers: [ $DNS_SERVERS ]
        options:
        - name: use-vc
        - name: ndots
      imagePullSecrets:
      - name: regcred
      nodeSelector:
        service.$SERVICE_NAME: allow
      volumes:
      - name: config
        hostPath: { path: $K8S_VOLUMES_PATH/duplicati/config }
      - name: artifactory
        hostPath: { path: $K8S_VOLUMES_PATH/artifactory }
      - name: backup
        hostPath: { path: $PATH_BKP }
      - name: cloud
        hostPath: { path: $K8S_VOLUMES_PATH/cloud }
      - name: dos
        hostPath: { path: $K8S_VOLUMES_PATH/dos }
      - name: ftp
        persistentVolumeClaim:
          claimName: ftp
      - name: gitlab
        hostPath: { path: $K8S_VOLUMES_PATH/gitlab }
      - name: home
        hostPath: { path: /home }
      - name: household
        hostPath: { path: $K8S_VOLUMES_PATH/household }
      - name: inbox
        hostPath: { path: $K8S_VOLUMES_PATH/inbox }
      - name: jira
        hostPath: { path: $K8S_VOLUMES_PATH/jira }
      - name: mp3
        persistentVolumeClaim:
          claimName: mp3
      - name: nexus
        hostPath: { path: $K8S_VOLUMES_PATH/nexus }
      - name: ox-appsuite
        hostPath: { path: $K8S_VOLUMES_PATH/ox-appsuite }
      - name: pictures
        persistentVolumeClaim:
          claimName: pictures
      - name: rainloop
        hostPath: { path: $K8S_VOLUMES_PATH/rainloop }
      - name: share
        hostPath: { path: $PATH_SHR }
      - name: user
        persistentVolumeClaim:
          claimName: user
      - name: webmail
        hostPath: { path: $K8S_VOLUMES_PATH/webmail }
  volumeClaimTemplates:
  - metadata:
      name: restore
    spec:
      accessModes: [ ReadWriteOnce ]
      resources:
        requests:
          storage: 8Gi
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: $SERVICE_NAME-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
  - host: $SERVICE_NAME.$DOMAIN
    http:
      paths:
      - path: /
        backend:
          serviceName: $SERVICE_NAME
          servicePort: 80
---
# TODO
# apiVersion: extensions/v1beta1
# kind: Ingress
# metadata:
#   name: $SERVICE_NAME-totp
#   annotations:
#     kubernetes.io/ingress.class: nginx
#     nginx.ingress.kubernetes.io/auth-url: http://$AUTHELIA_IP/api/verify
#     nginx.ingress.kubernetes.io/auth-signin: https://authtotp.$DOMAIN
# spec:
#   rules:
#   - host: $SERVICE_NAME.$DOMAIN
#     http:
#       paths:
#       - path: /login.html
#         backend:
#           serviceName: $SERVICE_NAME
#           servicePort: 80
