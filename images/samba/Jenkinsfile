#!/usr/bin/env groovy
// Pipeline for docker-image build
//  created by richb@instantlinux.net 20-apr-2017

def buildDate = java.time.Instant.now().toString()
def maintainer = 'richb@instantlinux.net'
def registry = 'nexus.instantlinux.net'
def registryCreds = [credentialsId: 'docker-registry',
                     url: "https://${registry}"]
def service = env.JOB_NAME.split('/', 2)[0]

pipeline {
  agent { label 'swarm' }
  stages {
    stage('Static Code Analysis') {
      steps {
        sh "env ; cd images/${service} && make analysis"
      }
    }
    stage('Create Image') {
      steps {
        script {
          gitCommit = checkout(scm).GIT_COMMIT
          imageTag = "dev_build_${env.BUILD_NUMBER}_${gitCommit.take(7)}"
	  img = docker.build("${registry}/${service}:${imageTag}",
			     "--build-arg=VCS_REF=${gitCommit} " +
			     "--build-arg=BUILD_DATE=${buildDate} " +
			     "images/${service}")
        }
      }
    }
    stage('Push Image') {
      steps {
        withDockerRegistry(registryCreds) {
          script {
            img.push imageTag
          }
        }
      }
    }
    stage('Functional Tests') {
      steps {
        withDockerRegistry(registryCreds) {
          script {
            dir("images/${service}") {
              sh 'make test_functional'
            }
          }
        }
      }
    }
    stage('Promote Image') {
      steps {
        withDockerRegistry(registryCreds) {
          script {
            img.push 'latest'
          }
        }
      }
    }
  }
  post {
    always {
      deleteDir()
    }
    success {
      emailext (
        to: maintainer,
        subject: "Job ${env.JOB_NAME} #${env.BUILD_NUMBER} success",
        body: "Build URL: ${env.BUILD_URL}.\nDocker Image ${registry}/${service}\n",
        attachLog: true
      )
    }
    failure {
      sh "docker rmi ${registry}/${service}:${imageTag}"
      emailext (
        to: maintainer,
        subject: "Job ${env.JOB_NAME} #${env.BUILD_NUMBER} failed",
        body: "Failed build URL: ${env.BUILD_URL}.\n",
        attachLog: true
      )
    }
  }
}
